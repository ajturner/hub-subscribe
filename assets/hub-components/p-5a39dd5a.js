import{g as t}from"./p-796574a4.js";import{b as e}from"./p-1458dcfd.js";import{q as r}from"./p-8ccaf06d.js";async function n(i,a){switch(i.source.type){case"static-value":return function(t){const e=t.source,r=t.id.split("_")[0];return Promise.resolve({features:[{attributes:{id:t.entityInfo.id,name:t.entityInfo.name,type:t.entityInfo.type,[r]:e.value}}],generatedAt:(new Date).getTime()})}(i);case"service-query":return async function(e,n){const i=e.source,a=e.id.split("_")[0];i.where=i.where||"1=1";const s={onStatisticField:i.field,statisticType:i.statistic,outStatisticFieldName:i.field},o=i.serviceUrl+`/${i.layerId}`,c=await r({url:o,where:i.where,f:"json",outStatistics:[s],authentication:n.requestOptions.authentication}),u=t(c,`features[0].attributes.${i.field}`);return{features:[{attributes:{id:e.entityInfo.id,name:e.entityInfo.name,type:e.entityInfo.type,[a]:u}}],generatedAt:(new Date).getTime()}}(i,a);case"item-query":return async function(r,i){const a=r.source,s=r.id.split("_")[0],o={typekeywords:a.keywords};a.itemTypes&&(o.type=a.itemTypes);const c=(t=>{const e=(t=t.filter((t=>t)))[0].targetEntity;if(t.some((t=>t.targetEntity!==e)))throw new Error("Cannot combine queries for different entity types");const r=t.reduce(((t,e)=>[...t,...e.filters]),[]);return{targetEntity:e,filters:r}})([{targetEntity:"item",filters:[{operation:"AND",predicates:[o]}]},a.scope||{targetEntity:"item",filters:[]}]),u={requestOptions:i.hubRequestOptions,num:100},f=await e(c,u),m=await f.results.reduce((async(e,r)=>{const o=await e,c=t(r,a.propertyPath),u={attributes:{id:r.id,name:r.title,type:r.type,[s]:null}};if(c)if("string"==typeof c||"number"==typeof c)u.attributes[s]=c,o.push(Promise.resolve(u));else{c.entityInfo=u.attributes;const t=await n(c,i);o.push(...t.features)}return o}),Promise.resolve([]));return{features:await Promise.all(m),generatedAt:(new Date).getTime()}}(i,a);default:throw new Error("Unknown metric type passed in.")}}export{n as r}