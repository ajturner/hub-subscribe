{"version":3,"names":["CSS","container","dividerContainer","divider","widthAuto","widthHalf","widthFull","splitButtonCss","SplitButton","constructor","hostRef","this","calciteSplitButtonPrimaryClickHandler","calciteSplitButtonPrimaryClick","emit","calciteSplitButtonSecondaryClickHandler","calciteSplitButtonSecondaryClick","appearance","kind","disabled","active","dropdownIconType","dropdownLabel","undefined","loading","overlayPositioning","primaryIconEnd","primaryIconFlipRtl","primaryIconStart","primaryLabel","primaryText","scale","width","handleDisabledChange","value","activeHandler","async","componentFocusable","el","focus","connectedCallback","connectInteractive","componentWillLoad","setUpLoadableComponent","componentDidLoad","setComponentLoaded","componentDidRender","updateHostInteraction","disconnectedCallback","disconnectInteractive","render","buttonWidth","h","InteractiveContainer","key","class","iconFlipRtl","label","onClick","splitChild","type","open","placement","dropdownIcon","slot","delegatesFocus"],"sources":["./node_modules/@esri/calcite-components/dist/collection/components/split-button/resources.js","./node_modules/@esri/calcite-components/dist/collection/components/split-button/split-button.css?tag=calcite-split-button&encapsulation=shadow","./node_modules/@esri/calcite-components/dist/collection/components/split-button/split-button.js"],"sourcesContent":["/*!\n * All material copyright ESRI, All Rights Reserved, unless otherwise specified.\n * See https://github.com/Esri/calcite-design-system/blob/main/LICENSE.md for details.\n * v2.8.0\n */\nexport const CSS = {\n    container: \"container\",\n    dividerContainer: \"divider-container\",\n    divider: \"divider\",\n    widthAuto: \"width-auto\",\n    widthHalf: \"width-half\",\n    widthFull: \"width-full\",\n};\n//# sourceMappingURL=resources.js.map\n","/**\n * Do not edit directly\n * Generated on Wed, 01 May 2024 00:07:10 GMT\n */\n/**\n * Do not edit directly\n * Generated on Wed, 01 May 2024 00:07:10 GMT\n */\n/**\n * Do not edit directly\n * Generated on Wed, 01 May 2024 00:07:10 GMT\n */\n/**\n * Do not edit directly\n * Generated on Wed, 01 May 2024 00:07:10 GMT\n */\n/**\n * Do not edit directly\n * Generated on Wed, 01 May 2024 00:07:08 GMT\n */\n/* mixins & extensions */\n/* helper to properly scale internal durations */\n/**\n* Currently only used in Checkbox.\n*/\n:host([disabled]) {\n  cursor: default;\n  -webkit-user-select: none;\n          user-select: none;\n  opacity: var(--calcite-opacity-disabled);\n}\n\n:host([disabled]) *,\n:host([disabled]) ::slotted(*) {\n  pointer-events: none;\n}\n\n:host {\n  display: inline-block;\n}\n\n:host([width=auto]) {\n  inline-size: auto;\n}\n\n:host([width=half]) {\n  inline-size: 50%;\n}\n\n:host([width=full]) {\n  inline-size: 100%;\n}\n\n:host:host([kind=brand]) {\n  --calcite-split-button-background: var(--calcite-color-brand);\n  --calcite-split-button-divider: var(--calcite-color-foreground-1);\n}\n:host:host([kind=danger]) {\n  --calcite-split-button-background: var(--calcite-color-status-danger);\n  --calcite-split-button-divider: var(--calcite-color-foreground-1);\n}\n:host:host([kind=neutral]) {\n  --calcite-split-button-background: var(--calcite-color-foreground-3);\n  --calcite-split-button-divider: var(--calcite-color-text-1);\n}\n:host:host([kind=inverse]) {\n  --calcite-split-button-background: var(--calcite-color-inverse);\n  --calcite-split-button-divider: var(--calcite-color-foreground-1);\n}\n\n:host([appearance=transparent]):host([kind=brand]) {\n  --calcite-split-button-divider: var(--calcite-color-brand);\n  --calcite-split-button-background: transparent;\n}\n:host([appearance=transparent]):host([kind=danger]) {\n  --calcite-split-button-divider: var(--calcite-color-status-danger);\n  --calcite-split-button-background: transparent;\n}\n:host([appearance=transparent]):host([kind=neutral]) {\n  --calcite-split-button-divider: var(--calcite-color-text-1);\n  --calcite-split-button-background: transparent;\n}\n:host([appearance=transparent]):host([kind=inverse]) {\n  --calcite-split-button-divider: var(--calcite-color-foreground-1);\n  --calcite-split-button-background: transparent;\n}\n\n:host([appearance=outline]) {\n  --calcite-split-button-background: transparent;\n}\n\n:host([appearance=outline-fill]) {\n  --calcite-split-button-background: var(--calcite-color-foreground-1);\n}\n\n:host([appearance=outline]):host([kind=brand]),\n:host([appearance=outline-fill]):host([kind=brand]) {\n  --calcite-split-button-divider: var(--calcite-color-brand);\n}\n:host([appearance=outline]):host([kind=danger]),\n:host([appearance=outline-fill]):host([kind=danger]) {\n  --calcite-split-button-divider: var(--calcite-color-status-danger);\n}\n:host([appearance=outline]):host([kind=neutral]),\n:host([appearance=outline-fill]):host([kind=neutral]) {\n  --calcite-split-button-divider: var(--calcite-color-border-1);\n  --calcite-split-button-background: var(--calcite-color-border-1);\n}\n:host([appearance=outline]):host([kind=inverse]),\n:host([appearance=outline-fill]):host([kind=inverse]) {\n  --calcite-split-button-divider: var(--calcite-color-inverse);\n}\n\n.container {\n  display: flex;\n  align-items: stretch;\n}\n.container > calcite-dropdown > calcite-button {\n  block-size: 100%;\n  vertical-align: top;\n}\n\n.divider-container {\n  display: flex;\n  inline-size: 1px;\n  align-items: stretch;\n  transition: background-color, block-size, border-color, box-shadow, color, inset-block-end, inset-block-start, inset-inline-end, inset-inline-start inset-size, opacity, outline-color, transform var(--calcite-animation-timing) ease-in-out 0s, outline 0s, outline-offset 0s;\n  background-color: var(--calcite-split-button-background);\n}\n\n.divider {\n  margin-block: 0.25rem;\n  display: inline-block;\n  inline-size: 1px;\n  background-color: var(--calcite-split-button-divider);\n}\n\n:host([appearance=outline-fill]) .divider-container,\n:host([appearance=outline]) .divider-container {\n  border-block: 1px solid var(--calcite-split-button-divider);\n}\n:host([appearance=outline-fill]):hover .divider-container,\n:host([appearance=outline]):hover .divider-container {\n  background-color: var(--calcite-split-button-divider);\n}\n\n:host([appearance=outline-fill]:hover) .divider-container,\n:host([appearance=outline]:hover) .divider-container {\n  background-color: var(--calcite-split-button-divider);\n}\n\n:host([appearance=outline-fill]:focus-within):host([kind=brand]),\n:host([appearance=outline]:focus-within):host([kind=brand]) {\n  --calcite-split-button-divider: var(--calcite-color-brand-press);\n}\n:host([appearance=outline-fill]:focus-within):host([kind=danger]),\n:host([appearance=outline]:focus-within):host([kind=danger]) {\n  --calcite-split-button-divider: var(--calcite-color-status-danger-press);\n}\n:host([appearance=outline-fill]:focus-within) .divider-container,\n:host([appearance=outline]:focus-within) .divider-container {\n  background-color: var(--calcite-split-button-divider);\n}\n\n:host([disabled]) .divider-container {\n  opacity: var(--calcite-opacity-disabled);\n}\n:host([disabled]) calcite-dropdown > calcite-button {\n  pointer-events: none;\n}\n:host([disabled]) ::slotted([calcite-hydrated][disabled]),\n:host([disabled]) [calcite-hydrated][disabled] {\n  /* prevent opacity stacking */\n  opacity: 1;\n}\n\n.interaction-container {\n  display: contents;\n}\n\n:host([hidden]) {\n  display: none;\n}\n\n[hidden] {\n  display: none;\n}","/*!\n * All material copyright ESRI, All Rights Reserved, unless otherwise specified.\n * See https://github.com/Esri/calcite-design-system/blob/main/LICENSE.md for details.\n * v2.8.0\n */\nimport { h, } from \"@stencil/core\";\nimport { connectInteractive, disconnectInteractive, InteractiveContainer, updateHostInteraction, } from \"../../utils/interactive\";\nimport { componentFocusable, setComponentLoaded, setUpLoadableComponent, } from \"../../utils/loadable\";\nimport { CSS } from \"./resources\";\n/**\n * @slot - A slot for adding `calcite-dropdown` content.\n */\nexport class SplitButton {\n    constructor() {\n        this.calciteSplitButtonPrimaryClickHandler = () => this.calciteSplitButtonPrimaryClick.emit();\n        this.calciteSplitButtonSecondaryClickHandler = () => this.calciteSplitButtonSecondaryClick.emit();\n        this.appearance = \"solid\";\n        this.kind = \"brand\";\n        this.disabled = false;\n        this.active = false;\n        this.dropdownIconType = \"chevron\";\n        this.dropdownLabel = undefined;\n        this.loading = false;\n        this.overlayPositioning = \"absolute\";\n        this.primaryIconEnd = undefined;\n        this.primaryIconFlipRtl = undefined;\n        this.primaryIconStart = undefined;\n        this.primaryLabel = undefined;\n        this.primaryText = undefined;\n        this.scale = \"m\";\n        this.width = \"auto\";\n    }\n    handleDisabledChange(value) {\n        if (!value) {\n            this.active = false;\n        }\n    }\n    activeHandler() {\n        if (this.disabled) {\n            this.active = false;\n        }\n    }\n    //--------------------------------------------------------------------------\n    //\n    //  Public Methods\n    //\n    //--------------------------------------------------------------------------\n    /** Sets focus on the component's first focusable element. */\n    async setFocus() {\n        await componentFocusable(this);\n        this.el.focus();\n    }\n    //--------------------------------------------------------------------------\n    //\n    //  Lifecycle\n    //\n    //--------------------------------------------------------------------------\n    connectedCallback() {\n        connectInteractive(this);\n    }\n    componentWillLoad() {\n        setUpLoadableComponent(this);\n    }\n    componentDidLoad() {\n        setComponentLoaded(this);\n    }\n    componentDidRender() {\n        updateHostInteraction(this);\n    }\n    disconnectedCallback() {\n        disconnectInteractive(this);\n    }\n    render() {\n        const buttonWidth = this.width === \"auto\" ? \"auto\" : \"full\";\n        return (h(InteractiveContainer, { key: '5bca9f9751e7f7ff1a4fb5bde5dd2cf8adeb039b', disabled: this.disabled }, h(\"div\", { key: 'd8d95651c49144034a5356b045b39a9b80ed8778', class: CSS.container }, h(\"calcite-button\", { key: 'd882eca49b2d32c0c366bac900c01b6f448e2af6', appearance: this.appearance, disabled: this.disabled, \"icon-end\": this.primaryIconEnd ? this.primaryIconEnd : null, \"icon-start\": this.primaryIconStart ? this.primaryIconStart : null, iconFlipRtl: this.primaryIconFlipRtl ? this.primaryIconFlipRtl : null, kind: this.kind, label: this.primaryLabel, loading: this.loading, onClick: this.calciteSplitButtonPrimaryClickHandler, scale: this.scale, splitChild: \"primary\", type: \"button\", width: buttonWidth }, this.primaryText), h(\"div\", { key: '7756c7e247a7d74c94d635b7da4e23e25588ccdc', class: CSS.dividerContainer }, h(\"div\", { key: 'b855b43e1338dd73b8f9fa27217843bb0e1bdf64', class: CSS.divider })), h(\"calcite-dropdown\", { key: 'ab0fba71ae22c3af9563f99a5ac0feb51be0fb9f', disabled: this.disabled, onClick: this.calciteSplitButtonSecondaryClickHandler, open: this.active, overlayPositioning: this.overlayPositioning, placement: \"bottom-end\", scale: this.scale, \"width-scale\": this.scale }, h(\"calcite-button\", { key: '6b94ce6f08d225bff2be6a3ece459e991436835d', appearance: this.appearance, disabled: this.disabled, \"icon-start\": this.dropdownIcon, kind: this.kind, label: this.dropdownLabel, scale: this.scale, slot: \"trigger\", splitChild: \"secondary\", type: \"button\" }), h(\"slot\", { key: 'd7ddac81064109f923f0e871b59ff38128a17ab8' })))));\n    }\n    get dropdownIcon() {\n        return this.dropdownIconType === \"chevron\"\n            ? \"chevronDown\"\n            : this.dropdownIconType === \"caret\"\n                ? \"caretDown\"\n                : this.dropdownIconType === \"ellipsis\"\n                    ? \"ellipsis\"\n                    : \"handle-vertical\";\n    }\n    static get is() { return \"calcite-split-button\"; }\n    static get encapsulation() { return \"shadow\"; }\n    static get delegatesFocus() { return true; }\n    static get originalStyleUrls() {\n        return {\n            \"$\": [\"split-button.scss\"]\n        };\n    }\n    static get styleUrls() {\n        return {\n            \"$\": [\"split-button.css\"]\n        };\n    }\n    static get properties() {\n        return {\n            \"appearance\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"Extract<\\n    \\\"outline\\\" | \\\"outline-fill\\\" | \\\"solid\\\" | \\\"transparent\\\",\\n    Appearance\\n  >\",\n                    \"resolved\": \"\\\"outline\\\" | \\\"outline-fill\\\" | \\\"solid\\\" | \\\"transparent\\\"\",\n                    \"references\": {\n                        \"Extract\": {\n                            \"location\": \"global\",\n                            \"id\": \"global::Extract\"\n                        },\n                        \"Appearance\": {\n                            \"location\": \"import\",\n                            \"path\": \"../interfaces\",\n                            \"id\": \"src/components/interfaces.ts::Appearance\"\n                        }\n                    }\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Specifies the appearance style of the component.\"\n                },\n                \"attribute\": \"appearance\",\n                \"reflect\": true,\n                \"defaultValue\": \"\\\"solid\\\"\"\n            },\n            \"kind\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"Extract<\\\"brand\\\" | \\\"danger\\\" | \\\"inverse\\\" | \\\"neutral\\\", Kind>\",\n                    \"resolved\": \"\\\"brand\\\" | \\\"danger\\\" | \\\"inverse\\\" | \\\"neutral\\\"\",\n                    \"references\": {\n                        \"Extract\": {\n                            \"location\": \"global\",\n                            \"id\": \"global::Extract\"\n                        },\n                        \"Kind\": {\n                            \"location\": \"import\",\n                            \"path\": \"../interfaces\",\n                            \"id\": \"src/components/interfaces.ts::Kind\"\n                        }\n                    }\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Specifies the kind of the component, which will apply to border and background, if applicable.\"\n                },\n                \"attribute\": \"kind\",\n                \"reflect\": true,\n                \"defaultValue\": \"\\\"brand\\\"\"\n            },\n            \"disabled\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"When `true`, interaction is prevented and the component is displayed with lower opacity.\"\n                },\n                \"attribute\": \"disabled\",\n                \"reflect\": true,\n                \"defaultValue\": \"false\"\n            },\n            \"active\": {\n                \"type\": \"boolean\",\n                \"mutable\": true,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [{\n                            \"name\": \"internal\",\n                            \"text\": undefined\n                        }],\n                    \"text\": \"When `true`, the component is active.\"\n                },\n                \"attribute\": \"active\",\n                \"reflect\": true,\n                \"defaultValue\": \"false\"\n            },\n            \"dropdownIconType\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"DropdownIconType\",\n                    \"resolved\": \"\\\"caret\\\" | \\\"chevron\\\" | \\\"ellipsis\\\" | \\\"overflow\\\"\",\n                    \"references\": {\n                        \"DropdownIconType\": {\n                            \"location\": \"import\",\n                            \"path\": \"../button/interfaces\",\n                            \"id\": \"src/components/button/interfaces.ts::DropdownIconType\"\n                        }\n                    }\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Specifies the icon used for the dropdown menu.\"\n                },\n                \"attribute\": \"dropdown-icon-type\",\n                \"reflect\": true,\n                \"defaultValue\": \"\\\"chevron\\\"\"\n            },\n            \"dropdownLabel\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string\",\n                    \"resolved\": \"string\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Accessible name for the dropdown menu.\"\n                },\n                \"attribute\": \"dropdown-label\",\n                \"reflect\": true\n            },\n            \"loading\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"When `true`, a busy indicator is displayed on the primary button.\"\n                },\n                \"attribute\": \"loading\",\n                \"reflect\": true,\n                \"defaultValue\": \"false\"\n            },\n            \"overlayPositioning\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"OverlayPositioning\",\n                    \"resolved\": \"\\\"absolute\\\" | \\\"fixed\\\"\",\n                    \"references\": {\n                        \"OverlayPositioning\": {\n                            \"location\": \"import\",\n                            \"path\": \"../../utils/floating-ui\",\n                            \"id\": \"src/utils/floating-ui.ts::OverlayPositioning\"\n                        }\n                    }\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Determines the type of positioning to use for the overlaid content.\\n\\nUsing `\\\"absolute\\\"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout.\\n\\n`\\\"fixed\\\"` should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `\\\"fixed\\\"`.\"\n                },\n                \"attribute\": \"overlay-positioning\",\n                \"reflect\": true,\n                \"defaultValue\": \"\\\"absolute\\\"\"\n            },\n            \"primaryIconEnd\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string\",\n                    \"resolved\": \"string\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Specifies an icon to display at the end of the primary button.\"\n                },\n                \"attribute\": \"primary-icon-end\",\n                \"reflect\": true\n            },\n            \"primaryIconFlipRtl\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"FlipContext\",\n                    \"resolved\": \"\\\"both\\\" | \\\"end\\\" | \\\"start\\\"\",\n                    \"references\": {\n                        \"FlipContext\": {\n                            \"location\": \"import\",\n                            \"path\": \"../interfaces\",\n                            \"id\": \"src/components/interfaces.ts::FlipContext\"\n                        }\n                    }\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Displays the `primaryIconStart` and/or `primaryIconEnd` as flipped when the element direction is right-to-left (`\\\"rtl\\\"`).\"\n                },\n                \"attribute\": \"primary-icon-flip-rtl\",\n                \"reflect\": true\n            },\n            \"primaryIconStart\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string\",\n                    \"resolved\": \"string\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Specifies an icon to display at the start of the primary button.\"\n                },\n                \"attribute\": \"primary-icon-start\",\n                \"reflect\": true\n            },\n            \"primaryLabel\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string\",\n                    \"resolved\": \"string\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Accessible name for the primary button.\"\n                },\n                \"attribute\": \"primary-label\",\n                \"reflect\": true\n            },\n            \"primaryText\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string\",\n                    \"resolved\": \"string\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Text displayed in the primary button.\"\n                },\n                \"attribute\": \"primary-text\",\n                \"reflect\": true\n            },\n            \"scale\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"Scale\",\n                    \"resolved\": \"\\\"l\\\" | \\\"m\\\" | \\\"s\\\"\",\n                    \"references\": {\n                        \"Scale\": {\n                            \"location\": \"import\",\n                            \"path\": \"../interfaces\",\n                            \"id\": \"src/components/interfaces.ts::Scale\"\n                        }\n                    }\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Specifies the size of the component.\"\n                },\n                \"attribute\": \"scale\",\n                \"reflect\": true,\n                \"defaultValue\": \"\\\"m\\\"\"\n            },\n            \"width\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"Width\",\n                    \"resolved\": \"\\\"auto\\\" | \\\"full\\\" | \\\"half\\\"\",\n                    \"references\": {\n                        \"Width\": {\n                            \"location\": \"import\",\n                            \"path\": \"../interfaces\",\n                            \"id\": \"src/components/interfaces.ts::Width\"\n                        }\n                    }\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Specifies the width of the component.\"\n                },\n                \"attribute\": \"width\",\n                \"reflect\": true,\n                \"defaultValue\": \"\\\"auto\\\"\"\n            }\n        };\n    }\n    static get events() {\n        return [{\n                \"method\": \"calciteSplitButtonPrimaryClick\",\n                \"name\": \"calciteSplitButtonPrimaryClick\",\n                \"bubbles\": true,\n                \"cancelable\": false,\n                \"composed\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Fires when the primary button is clicked.\"\n                },\n                \"complexType\": {\n                    \"original\": \"void\",\n                    \"resolved\": \"void\",\n                    \"references\": {}\n                }\n            }, {\n                \"method\": \"calciteSplitButtonSecondaryClick\",\n                \"name\": \"calciteSplitButtonSecondaryClick\",\n                \"bubbles\": true,\n                \"cancelable\": false,\n                \"composed\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Fires when the dropdown menu is clicked.\"\n                },\n                \"complexType\": {\n                    \"original\": \"void\",\n                    \"resolved\": \"void\",\n                    \"references\": {}\n                }\n            }];\n    }\n    static get methods() {\n        return {\n            \"setFocus\": {\n                \"complexType\": {\n                    \"signature\": \"() => Promise<void>\",\n                    \"parameters\": [],\n                    \"references\": {\n                        \"Promise\": {\n                            \"location\": \"global\",\n                            \"id\": \"global::Promise\"\n                        }\n                    },\n                    \"return\": \"Promise<void>\"\n                },\n                \"docs\": {\n                    \"text\": \"Sets focus on the component's first focusable element.\",\n                    \"tags\": []\n                }\n            }\n        };\n    }\n    static get elementRef() { return \"el\"; }\n    static get watchers() {\n        return [{\n                \"propName\": \"disabled\",\n                \"methodName\": \"handleDisabledChange\"\n            }, {\n                \"propName\": \"active\",\n                \"methodName\": \"activeHandler\"\n            }];\n    }\n}\n//# sourceMappingURL=split-button.js.map\n"],"mappings":";;;;;GAKO,MAAMA,EAAM,CACfC,UAAW,YACXC,iBAAkB,oBAClBC,QAAS,UACTC,UAAW,aACXC,UAAW,aACXC,UAAW,cCXf,MAAMC,EAAiB,u6I,MCYVC,EAAW,MACpBC,YAAAC,G,4KACIC,KAAKC,sCAAwC,IAAMD,KAAKE,+BAA+BC,OACvFH,KAAKI,wCAA0C,IAAMJ,KAAKK,iCAAiCF,OAC3FH,KAAKM,WAAa,QAClBN,KAAKO,KAAO,QACZP,KAAKQ,SAAW,MAChBR,KAAKS,OAAS,MACdT,KAAKU,iBAAmB,UACxBV,KAAKW,cAAgBC,UACrBZ,KAAKa,QAAU,MACfb,KAAKc,mBAAqB,WAC1Bd,KAAKe,eAAiBH,UACtBZ,KAAKgB,mBAAqBJ,UAC1BZ,KAAKiB,iBAAmBL,UACxBZ,KAAKkB,aAAeN,UACpBZ,KAAKmB,YAAcP,UACnBZ,KAAKoB,MAAQ,IACbpB,KAAKqB,MAAQ,M,CAEjBC,qBAAqBC,GACjB,IAAKA,EAAO,CACRvB,KAAKS,OAAS,K,EAGtBe,gBACI,GAAIxB,KAAKQ,SAAU,CACfR,KAAKS,OAAS,K,EAStBgB,uBACUC,EAAmB1B,MACzBA,KAAK2B,GAAGC,O,CAOZC,oBACIC,EAAmB9B,K,CAEvB+B,oBACIC,EAAuBhC,K,CAE3BiC,mBACIC,EAAmBlC,K,CAEvBmC,qBACIC,EAAsBpC,K,CAE1BqC,uBACIC,EAAsBtC,K,CAE1BuC,SACI,MAAMC,EAAcxC,KAAKqB,QAAU,OAAS,OAAS,OACrD,OAAQoB,EAAEC,EAAsB,CAAEC,IAAK,2CAA4CnC,SAAUR,KAAKQ,UAAYiC,EAAE,MAAO,CAAEE,IAAK,2CAA4CC,MAAOvD,EAAIC,WAAamD,EAAE,iBAAkB,CAAEE,IAAK,2CAA4CrC,WAAYN,KAAKM,WAAYE,SAAUR,KAAKQ,SAAU,WAAYR,KAAKe,eAAiBf,KAAKe,eAAiB,KAAM,aAAcf,KAAKiB,iBAAmBjB,KAAKiB,iBAAmB,KAAM4B,YAAa7C,KAAKgB,mBAAqBhB,KAAKgB,mBAAqB,KAAMT,KAAMP,KAAKO,KAAMuC,MAAO9C,KAAKkB,aAAcL,QAASb,KAAKa,QAASkC,QAAS/C,KAAKC,sCAAuCmB,MAAOpB,KAAKoB,MAAO4B,WAAY,UAAWC,KAAM,SAAU5B,MAAOmB,GAAexC,KAAKmB,aAAcsB,EAAE,MAAO,CAAEE,IAAK,2CAA4CC,MAAOvD,EAAIE,kBAAoBkD,EAAE,MAAO,CAAEE,IAAK,2CAA4CC,MAAOvD,EAAIG,WAAaiD,EAAE,mBAAoB,CAAEE,IAAK,2CAA4CnC,SAAUR,KAAKQ,SAAUuC,QAAS/C,KAAKI,wCAAyC8C,KAAMlD,KAAKS,OAAQK,mBAAoBd,KAAKc,mBAAoBqC,UAAW,aAAc/B,MAAOpB,KAAKoB,MAAO,cAAepB,KAAKoB,OAASqB,EAAE,iBAAkB,CAAEE,IAAK,2CAA4CrC,WAAYN,KAAKM,WAAYE,SAAUR,KAAKQ,SAAU,aAAcR,KAAKoD,aAAc7C,KAAMP,KAAKO,KAAMuC,MAAO9C,KAAKW,cAAeS,MAAOpB,KAAKoB,MAAOiC,KAAM,UAAWL,WAAY,YAAaC,KAAM,WAAaR,EAAE,OAAQ,CAAEE,IAAK,+C,CAE99CS,mBACA,OAAOpD,KAAKU,mBAAqB,UAC3B,cACAV,KAAKU,mBAAqB,QACtB,YACAV,KAAKU,mBAAqB,WACtB,WACA,iB,CAIP4C,4BAAmB,OAAO,IAAK,C"}