{"version":3,"names":["colorPickerCss","throttleFor60FpsInMs","ColorPicker","constructor","hostRef","this","internalColorUpdateContext","mode","CSSColorMode","HEX","shiftKeyChannelAdjustment","handleTabActivate","event","channelMode","currentTarget","getAttribute","updateChannelsFromColor","color","handleColorFieldScopeKeyDown","key","arrowKeyToXYOffset","ArrowUp","x","y","ArrowRight","ArrowDown","ArrowLeft","preventDefault","scopeOrientation","captureColorFieldColor","colorFieldScopeLeft","colorFieldScopeTop","handleHueScopeKeyDown","modifier","shiftKey","arrowKeyToXOffset","delta","hue","baseColorFieldColor","internalColorSet","handleHexInputChange","stopPropagation","isClearable","input","target","hex","value","normalizedHex","normalizeHex","hexify","alphaCompatible","Color","handleSavedColorSelect","swatch","handleChannelInput","channelIndex","Number","isAlphaChannel","limit","OPACITY_LIMITS","max","RGB_LIMITS","Object","keys","HSV_LIMITS","inputValue","adjustedValue","clamped","clamp","toString","handleChannelChange","channels","shouldClearChannels","opacityToAlpha","updateColorFromChannels","handleSavedColorKeyDown","isActivationKey","handleColorFieldPointerDown","isPrimaryPointerButton","offsetX","offsetY","window","addEventListener","globalPointerMoveHandler","globalPointerUpHandler","once","activeCanvasInfo","context","colorFieldRenderingContext","bounds","canvas","getBoundingClientRect","colorFieldScopeNode","focus","handleHueSliderPointerDown","hueSliderRenderingContext","captureHueSliderColor","hueScopeNode","handleOpacitySliderPointerDown","opacitySliderRenderingContext","captureOpacitySliderValue","opacityScopeNode","previouslyDragging","drawColorControls","calciteColorPickerChange","emit","el","isConnected","samplingX","samplingY","clientX","clientY","matches","width","height","storeColorFieldScope","node","storeHueScope","renderChannelsTabTitle","activeChannelMode","messages","selected","label","rgb","hsv","h","class","CSS","colorMode","onCalciteTabsActivate","renderChannelsTab","alphaChannel","isRgb","channelAriaLabels","red","green","blue","saturation","direction","getElementDir","channelsToRender","slice","control","dir","map","channelValue","index","alphaToOpacity","renderChannel","ariaLabel","suffix","channel","lang","effectiveLocale","numberButtonType","numberingSystem","onCalciteInputNumberChange","onCalciteInputNumberInput","onKeyDown","handleKeyDown","scale","style","marginLeft","suffixText","deleteColor","colorToDelete","inStorage","savedColors","indexOf","filter","storageKey","DEFAULT_STORAGE_KEY_PREFIX","storageId","localStorage","setItem","JSON","stringify","saveColor","colorToSave","alreadySaved","throttle","type","drawColorField","drawHueSlider","drawOpacitySlider","skipEqual","dimensions","colorField","Math","round","s","v","saturationv","initColorField","getContext","updateCanvasSize","initHueSlider","initOpacitySlider","storeOpacityScope","handleOpacityScopeKeyDown","alpha","allowEmpty","channelsDisabled","clearable","DEFAULT_COLOR","disabled","format","hideChannels","hexDisabled","hideHex","hideSaved","savedDisabled","undefined","messageOverrides","defaultMessages","toChannels","DIMENSIONS","m","hueScopeLeft","opacityScopeLeft","handleAllowEmptyOrClearableChange","handleAlphaChannelChange","console","warn","handleColorChange","oldColor","previousColor","handleFormatOrAlphaChannelChange","setMode","handleScaleChange","updateDimensions","onMessagesChange","handleValueChange","oldValue","checkMode","modeChanged","nextMode","parseMode","showIncompatibleColorWarning","dragging","calciteColorPickerInput","normalizeColor","colorChanged","colorEqual","endsWith","effectiveLocaleChange","updateMessages","handleChannelKeyUpOrDown","composedPath","some","_a","classList","contains","complementaryBump","async","componentFocusable","setUpLoadableComponent","willSetNoColor","parsedMode","valueIsCompatible","initialColor","getItem","parse","setUpMessages","connectedCallback","connectInteractive","connectLocalized","connectMessages","componentDidLoad","setComponentLoaded","disconnectedCallback","removeEventListener","disconnectInteractive","disconnectLocalized","disconnectMessages","componentDidRender","updateHostInteraction","render","slider","sliderWidth","thumb","radius","thumbRadius","selectedColorInHex","hueTop","hueLeft","opacityTop","opacityLeft","noColor","vertical","noHex","noChannels","noSaved","adjustedColorFieldScopeLeft","adjustedColorFieldScopeTop","getAdjustedScopePosition","adjustedHueScopeLeft","adjustedHueScopeTop","adjustedOpacityScopeLeft","adjustedOpacityScopeTop","InteractiveContainer","container","controlAndScope","onPointerDown","ref","scope","colorFieldScope","role","top","left","tabindex","previewAndSliders","preview","sliders","hueSlider","hueScope","opacitySlider","opacity","min","opacityScope","controlSection","section","hexAndChannelsGroup","hexOptions","onCalciteColorPickerHexInputChange","colorModeContainer","splitSection","slot","savedColorsSection","header","saved","savedColorsButtons","appearance","iconStart","kind","onClick","length","savedColor","tabIndex","ensureCompatibleMode","isAlphaCompatible","alphaMode","toAlphaMode","nonAlphaMode","toNonAlphaMode","HUE_LIMIT_CONSTRAINED","toValue","hexMode","includes","hasAlpha","HEXA","replace","string","needToInjectAlpha","model","values","colorObject","object","normalizeAlpha","getSliderCapSpacing","fillStyle","fillRect","whiteGradient","createLinearGradient","addColorStop","blackGradient","drawActiveColorFieldColor","setCanvasContextSize","devicePixelRatio","adjustedSliderDimensions","_b","_c","hsvColor","requestAnimationFrame","drawThumb","applyAlpha","startAngle","endAngle","PI","outlineWidth","beginPath","arc","fill","strokeStyle","lineWidth","stroke","pattern","createPattern","getCheckeredBackgroundPattern","globalCompositeOperation","drawActiveHueSliderColor","sliderBoundX","getSliderBoundX","gradient","hueSliderColorStopKeywords","offset","currentOffset","forEach","keyword","clearRect","drawSliderPath","startColor","midColor","endColor","drawActiveOpacitySliderColor","moveTo","lineTo","quadraticCurveTo","closePath","checkerPattern","document","createElement","patternContext","closeToEdge","closeToRangeEdge","remap","array","isAlpha","floor","push","SCOPE_SIZE","delegatesFocus","assetsDirs"],"sources":["./node_modules/@esri/calcite-components/dist/collection/components/color-picker/color-picker.css?tag=calcite-color-picker&encapsulation=shadow","./node_modules/@esri/calcite-components/dist/collection/components/color-picker/color-picker.js"],"sourcesContent":["/**\n * Do not edit directly\n * Generated on Wed, 01 May 2024 00:07:10 GMT\n */\n/**\n * Do not edit directly\n * Generated on Wed, 01 May 2024 00:07:10 GMT\n */\n/**\n * Do not edit directly\n * Generated on Wed, 01 May 2024 00:07:10 GMT\n */\n/**\n * Do not edit directly\n * Generated on Wed, 01 May 2024 00:07:10 GMT\n */\n/**\n * Do not edit directly\n * Generated on Wed, 01 May 2024 00:07:08 GMT\n */\n/* mixins & extensions */\n/* helper to properly scale internal durations */\n/**\n* Currently only used in Checkbox.\n*/\n:host([disabled]) {\n  cursor: default;\n  -webkit-user-select: none;\n          user-select: none;\n  opacity: var(--calcite-opacity-disabled);\n}\n\n:host([disabled]) *,\n:host([disabled]) ::slotted(*) {\n  pointer-events: none;\n}\n\n:host {\n  display: inline-block;\n  font-size: var(--calcite-font-size--2);\n  line-height: 1rem;\n  font-weight: var(--calcite-font-weight-normal);\n}\n\n:host([disabled]) ::slotted([calcite-hydrated][disabled]),\n:host([disabled]) [calcite-hydrated][disabled] {\n  /* prevent opacity stacking */\n  opacity: 1;\n}\n\n.interaction-container {\n  display: contents;\n}\n\n:host([scale=s]) {\n  --calcite-color-picker-spacing: 8px;\n}\n:host([scale=s]) .container {\n  inline-size: 160px;\n}\n:host([scale=s]) .saved-colors {\n  gap: 0.25rem;\n  grid-template-columns: repeat(auto-fill, 20px);\n}\n\n:host([scale=m]) {\n  --calcite-color-picker-spacing: 12px;\n}\n:host([scale=m]) .container {\n  inline-size: 272px;\n}\n\n:host([scale=l]) {\n  --calcite-color-picker-spacing: 16px;\n  font-size: var(--calcite-font-size--1);\n  line-height: 1rem;\n}\n:host([scale=l]) .container {\n  inline-size: 464px;\n}\n:host([scale=l]) .section:first-of-type {\n  padding-block-start: var(--calcite-color-picker-spacing);\n}\n:host([scale=l]) .saved-colors {\n  grid-template-columns: repeat(auto-fill, 32px);\n}\n:host([scale=l]) .control-section {\n  flex-wrap: nowrap;\n  align-items: baseline;\n  flex-wrap: wrap;\n}\n:host([scale=l]) .color-hex-options {\n  display: flex;\n  flex-shrink: 1;\n  flex-direction: column;\n  justify-content: space-around;\n}\n:host([scale=l]) .color-mode-container {\n  flex-shrink: 3;\n}\n\n.container {\n  background-color: var(--calcite-color-foreground-1);\n  display: inline-block;\n  border: 1px solid var(--calcite-color-border-1);\n}\n\n.control-and-scope {\n  position: relative;\n  display: flex;\n  cursor: pointer;\n  touch-action: none;\n}\n\n.scope {\n  pointer-events: none;\n  position: absolute;\n  z-index: var(--calcite-z-index);\n  block-size: 1px;\n  inline-size: 1px;\n  border-radius: 9999px;\n  background-color: transparent;\n  font-size: var(--calcite-font-size--1);\n  outline-color: transparent;\n}\n.scope:focus {\n  outline: 2px solid var(--calcite-ui-focus-color, var(--calcite-color-brand));\n  outline-offset: calc(\n            2px *\n            calc(\n              1 -\n              2 * clamp(\n                0,\n                var(--calcite-offset-invert-focus),\n                1\n              )\n            )\n          );\n  outline-offset: 11px;\n}\n\n.hex-and-channels-group {\n  inline-size: 100%;\n}\n\n.hex-and-channels-group,\n.control-section {\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n}\n\n.section {\n  padding-block: 0 var(--calcite-color-picker-spacing);\n  padding-inline: var(--calcite-color-picker-spacing);\n}\n.section:first-of-type {\n  padding-block-start: var(--calcite-color-picker-spacing);\n}\n\n.sliders {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  margin-inline-start: var(--calcite-color-picker-spacing);\n}\n\n.preview-and-sliders {\n  display: flex;\n  align-items: center;\n  padding: var(--calcite-color-picker-spacing);\n}\n\n.color-hex-options,\n.section--split {\n  flex-grow: 1;\n}\n\n.header {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  color: var(--calcite-color-text-1);\n}\n\n.color-mode-container {\n  padding-block-start: var(--calcite-color-picker-spacing);\n}\n\n.channels {\n  display: flex;\n  row-gap: 0.125rem;\n}\n\n.channel[data-channel-index=\"3\"] {\n  inline-size: 159px;\n}\n\n:host([scale=s]) .channels {\n  flex-wrap: wrap;\n}\n:host([scale=s]) .channel {\n  flex-basis: 30%;\n  flex-grow: 1;\n}\n:host([scale=s]) .channel[data-channel-index=\"3\"] {\n  inline-size: unset;\n  margin-inline-start: unset;\n}\n\n:host([scale=l]) .channel[data-channel-index=\"3\"] {\n  inline-size: 131px;\n}\n\n.saved-colors {\n  display: grid;\n  gap: 0.5rem;\n  padding-block-start: var(--calcite-color-picker-spacing);\n  grid-template-columns: repeat(auto-fill, 24px);\n}\n\n.saved-colors-buttons {\n  display: flex;\n}\n\n.saved-color {\n  outline-offset: 0;\n  outline-color: transparent;\n  cursor: pointer;\n}\n.saved-color:focus {\n  outline: 2px solid var(--calcite-color-brand);\n  outline-offset: 2px;\n}\n.saved-color:hover {\n  transition: outline-color var(--calcite-internal-animation-timing-fast) ease-in-out;\n  outline: 2px solid var(--calcite-color-border-2);\n  outline-offset: 2px;\n}\n\n:host([hidden]) {\n  display: none;\n}\n\n[hidden] {\n  display: none;\n}","/*!\n * All material copyright ESRI, All Rights Reserved, unless otherwise specified.\n * See https://github.com/Esri/calcite-design-system/blob/main/LICENSE.md for details.\n * v2.8.0\n */\nimport { h, } from \"@stencil/core\";\nimport Color from \"color\";\nimport { throttle } from \"lodash-es\";\nimport { getElementDir, isPrimaryPointerButton } from \"../../utils/dom\";\nimport { connectInteractive, disconnectInteractive, InteractiveContainer, updateHostInteraction, } from \"../../utils/interactive\";\nimport { isActivationKey } from \"../../utils/key\";\nimport { componentFocusable, setComponentLoaded, setUpLoadableComponent, } from \"../../utils/loadable\";\nimport { connectLocalized, disconnectLocalized, } from \"../../utils/locale\";\nimport { clamp, closeToRangeEdge, remap } from \"../../utils/math\";\nimport { connectMessages, disconnectMessages, setUpMessages, updateMessages, } from \"../../utils/t9n\";\nimport { alphaCompatible, alphaToOpacity, colorEqual, CSSColorMode, hexify, normalizeAlpha, normalizeColor, normalizeHex, opacityToAlpha, parseMode, toAlphaMode, toNonAlphaMode, } from \"./utils\";\nimport { CSS, DEFAULT_COLOR, DEFAULT_STORAGE_KEY_PREFIX, DIMENSIONS, HSV_LIMITS, HUE_LIMIT_CONSTRAINED, OPACITY_LIMITS, RGB_LIMITS, SCOPE_SIZE, } from \"./resources\";\nconst throttleFor60FpsInMs = 16;\nexport class ColorPicker {\n    constructor() {\n        this.internalColorUpdateContext = null;\n        this.mode = CSSColorMode.HEX;\n        this.shiftKeyChannelAdjustment = 0;\n        this.handleTabActivate = (event) => {\n            this.channelMode = event.currentTarget.getAttribute(\"data-color-mode\");\n            this.updateChannelsFromColor(this.color);\n        };\n        this.handleColorFieldScopeKeyDown = (event) => {\n            const { key } = event;\n            const arrowKeyToXYOffset = {\n                ArrowUp: { x: 0, y: -10 },\n                ArrowRight: { x: 10, y: 0 },\n                ArrowDown: { x: 0, y: 10 },\n                ArrowLeft: { x: -10, y: 0 },\n            };\n            if (arrowKeyToXYOffset[key]) {\n                event.preventDefault();\n                this.scopeOrientation = key === \"ArrowDown\" || key === \"ArrowUp\" ? \"vertical\" : \"horizontal\";\n                this.captureColorFieldColor(this.colorFieldScopeLeft + arrowKeyToXYOffset[key].x || 0, this.colorFieldScopeTop + arrowKeyToXYOffset[key].y || 0, false);\n            }\n        };\n        this.handleHueScopeKeyDown = (event) => {\n            const modifier = event.shiftKey ? 10 : 1;\n            const { key } = event;\n            const arrowKeyToXOffset = {\n                ArrowUp: 1,\n                ArrowRight: 1,\n                ArrowDown: -1,\n                ArrowLeft: -1,\n            };\n            if (arrowKeyToXOffset[key]) {\n                event.preventDefault();\n                const delta = arrowKeyToXOffset[key] * modifier;\n                const hue = this.baseColorFieldColor.hue();\n                const color = this.baseColorFieldColor.hue(hue + delta);\n                this.internalColorSet(color, false);\n            }\n        };\n        this.handleHexInputChange = (event) => {\n            event.stopPropagation();\n            const { isClearable, color } = this;\n            const input = event.target;\n            const hex = input.value;\n            if (isClearable && !hex) {\n                this.internalColorSet(null);\n                return;\n            }\n            const normalizedHex = color && normalizeHex(hexify(color, alphaCompatible(this.mode)));\n            if (hex !== normalizedHex) {\n                this.internalColorSet(Color(hex));\n            }\n        };\n        this.handleSavedColorSelect = (event) => {\n            const swatch = event.currentTarget;\n            this.internalColorSet(Color(swatch.color));\n        };\n        this.handleChannelInput = (event) => {\n            const input = event.currentTarget;\n            const channelIndex = Number(input.getAttribute(\"data-channel-index\"));\n            const isAlphaChannel = channelIndex === 3;\n            const limit = isAlphaChannel\n                ? OPACITY_LIMITS.max\n                : this.channelMode === \"rgb\"\n                    ? RGB_LIMITS[Object.keys(RGB_LIMITS)[channelIndex]]\n                    : HSV_LIMITS[Object.keys(HSV_LIMITS)[channelIndex]];\n            let inputValue;\n            if (this.isClearable && !input.value) {\n                inputValue = \"\";\n            }\n            else {\n                const value = Number(input.value);\n                const adjustedValue = value + this.shiftKeyChannelAdjustment;\n                const clamped = clamp(adjustedValue, 0, limit);\n                inputValue = clamped.toString();\n            }\n            input.value = inputValue;\n            if (inputValue !== \"\" && this.shiftKeyChannelAdjustment !== 0) {\n                // we treat nudging as a change event since the input won't emit when modifying the value directly\n                this.handleChannelChange(event);\n            }\n        };\n        this.handleChannelChange = (event) => {\n            const input = event.currentTarget;\n            const channelIndex = Number(input.getAttribute(\"data-channel-index\"));\n            const channels = [...this.channels];\n            const shouldClearChannels = this.isClearable && !input.value;\n            if (shouldClearChannels) {\n                this.channels = [null, null, null, null];\n                this.internalColorSet(null);\n                return;\n            }\n            const isAlphaChannel = channelIndex === 3;\n            const value = Number(input.value);\n            channels[channelIndex] = isAlphaChannel ? opacityToAlpha(value) : value;\n            this.updateColorFromChannels(channels);\n        };\n        this.handleSavedColorKeyDown = (event) => {\n            if (isActivationKey(event.key)) {\n                event.preventDefault();\n                this.handleSavedColorSelect(event);\n            }\n        };\n        this.handleColorFieldPointerDown = (event) => {\n            if (!isPrimaryPointerButton(event)) {\n                return;\n            }\n            const { offsetX, offsetY } = event;\n            window.addEventListener(\"pointermove\", this.globalPointerMoveHandler);\n            window.addEventListener(\"pointerup\", this.globalPointerUpHandler, { once: true });\n            this.activeCanvasInfo = {\n                context: this.colorFieldRenderingContext,\n                bounds: this.colorFieldRenderingContext.canvas.getBoundingClientRect(),\n            };\n            this.captureColorFieldColor(offsetX, offsetY);\n            this.colorFieldScopeNode.focus();\n        };\n        this.handleHueSliderPointerDown = (event) => {\n            if (!isPrimaryPointerButton(event)) {\n                return;\n            }\n            const { offsetX } = event;\n            window.addEventListener(\"pointermove\", this.globalPointerMoveHandler);\n            window.addEventListener(\"pointerup\", this.globalPointerUpHandler, { once: true });\n            this.activeCanvasInfo = {\n                context: this.hueSliderRenderingContext,\n                bounds: this.hueSliderRenderingContext.canvas.getBoundingClientRect(),\n            };\n            this.captureHueSliderColor(offsetX);\n            this.hueScopeNode.focus();\n        };\n        this.handleOpacitySliderPointerDown = (event) => {\n            if (!isPrimaryPointerButton(event)) {\n                return;\n            }\n            const { offsetX } = event;\n            window.addEventListener(\"pointermove\", this.globalPointerMoveHandler);\n            window.addEventListener(\"pointerup\", this.globalPointerUpHandler, { once: true });\n            this.activeCanvasInfo = {\n                context: this.opacitySliderRenderingContext,\n                bounds: this.opacitySliderRenderingContext.canvas.getBoundingClientRect(),\n            };\n            this.captureOpacitySliderValue(offsetX);\n            this.opacityScopeNode.focus();\n        };\n        this.globalPointerUpHandler = (event) => {\n            if (!isPrimaryPointerButton(event)) {\n                return;\n            }\n            const previouslyDragging = this.activeCanvasInfo;\n            this.activeCanvasInfo = null;\n            this.drawColorControls();\n            if (previouslyDragging) {\n                this.calciteColorPickerChange.emit();\n            }\n        };\n        this.globalPointerMoveHandler = (event) => {\n            const { activeCanvasInfo, el } = this;\n            if (!el.isConnected || !activeCanvasInfo) {\n                return;\n            }\n            const { context, bounds } = activeCanvasInfo;\n            let samplingX;\n            let samplingY;\n            const { clientX, clientY } = event;\n            if (context.canvas.matches(\":hover\")) {\n                samplingX = clientX - bounds.x;\n                samplingY = clientY - bounds.y;\n            }\n            else {\n                // snap x and y to the closest edge\n                if (clientX < bounds.x + bounds.width && clientX > bounds.x) {\n                    samplingX = clientX - bounds.x;\n                }\n                else if (clientX < bounds.x) {\n                    samplingX = 0;\n                }\n                else {\n                    samplingX = bounds.width;\n                }\n                if (clientY < bounds.y + bounds.height && clientY > bounds.y) {\n                    samplingY = clientY - bounds.y;\n                }\n                else if (clientY < bounds.y) {\n                    samplingY = 0;\n                }\n                else {\n                    samplingY = bounds.height;\n                }\n            }\n            if (context === this.colorFieldRenderingContext) {\n                this.captureColorFieldColor(samplingX, samplingY, false);\n            }\n            else if (context === this.hueSliderRenderingContext) {\n                this.captureHueSliderColor(samplingX);\n            }\n            else if (context === this.opacitySliderRenderingContext) {\n                this.captureOpacitySliderValue(samplingX);\n            }\n        };\n        this.storeColorFieldScope = (node) => {\n            this.colorFieldScopeNode = node;\n        };\n        this.storeHueScope = (node) => {\n            this.hueScopeNode = node;\n        };\n        this.renderChannelsTabTitle = (channelMode) => {\n            const { channelMode: activeChannelMode, messages } = this;\n            const selected = channelMode === activeChannelMode;\n            const label = channelMode === \"rgb\" ? messages.rgb : messages.hsv;\n            return (h(\"calcite-tab-title\", { class: CSS.colorMode, \"data-color-mode\": channelMode, key: channelMode, onCalciteTabsActivate: this.handleTabActivate, selected: selected }, label));\n        };\n        this.renderChannelsTab = (channelMode) => {\n            const { isClearable, channelMode: activeChannelMode, channels, messages, alphaChannel } = this;\n            const selected = channelMode === activeChannelMode;\n            const isRgb = channelMode === \"rgb\";\n            const channelAriaLabels = isRgb\n                ? [messages.red, messages.green, messages.blue]\n                : [messages.hue, messages.saturation, messages.value];\n            const direction = getElementDir(this.el);\n            const channelsToRender = alphaChannel ? channels : channels.slice(0, 3);\n            return (h(\"calcite-tab\", { class: CSS.control, key: channelMode, selected: selected }, h(\"div\", { class: CSS.channels, dir: \"ltr\" }, channelsToRender.map((channelValue, index) => {\n                const isAlphaChannel = index === 3;\n                if (isAlphaChannel) {\n                    channelValue =\n                        isClearable && !channelValue ? channelValue : alphaToOpacity(channelValue);\n                }\n                /* the channel container is ltr, so we apply the host's direction */\n                return this.renderChannel(channelValue, index, channelAriaLabels[index], direction, isAlphaChannel ? \"%\" : \"\");\n            }))));\n        };\n        this.renderChannel = (value, index, ariaLabel, direction, suffix) => {\n            return (h(\"calcite-input-number\", { class: CSS.channel, \"data-channel-index\": index, dir: direction, key: index, label: ariaLabel, lang: this.effectiveLocale, numberButtonType: \"none\", numberingSystem: this.numberingSystem, onCalciteInputNumberChange: this.handleChannelChange, onCalciteInputNumberInput: this.handleChannelInput, onKeyDown: this.handleKeyDown, scale: this.scale === \"l\" ? \"m\" : \"s\",\n                // workaround to ensure input borders overlap as desired\n                // this is because the build transforms margin-left to its\n                // logical-prop, which is undesired as channels are always ltr\n                style: {\n                    marginLeft: index > 0 && !(this.scale === \"s\" && this.alphaChannel && index === 3) ? \"-1px\" : \"\",\n                }, suffixText: suffix, value: value?.toString() }));\n        };\n        this.deleteColor = () => {\n            const colorToDelete = hexify(this.color, this.alphaChannel);\n            const inStorage = this.savedColors.indexOf(colorToDelete) > -1;\n            if (!inStorage) {\n                return;\n            }\n            const savedColors = this.savedColors.filter((color) => color !== colorToDelete);\n            this.savedColors = savedColors;\n            const storageKey = `${DEFAULT_STORAGE_KEY_PREFIX}${this.storageId}`;\n            if (this.storageId) {\n                localStorage.setItem(storageKey, JSON.stringify(savedColors));\n            }\n        };\n        this.saveColor = () => {\n            const colorToSave = hexify(this.color, this.alphaChannel);\n            const alreadySaved = this.savedColors.indexOf(colorToSave) > -1;\n            if (alreadySaved) {\n                return;\n            }\n            const savedColors = [...this.savedColors, colorToSave];\n            this.savedColors = savedColors;\n            const storageKey = `${DEFAULT_STORAGE_KEY_PREFIX}${this.storageId}`;\n            if (this.storageId) {\n                localStorage.setItem(storageKey, JSON.stringify(savedColors));\n            }\n        };\n        this.drawColorControls = throttle((type = \"all\") => {\n            if ((type === \"all\" || type === \"color-field\") && this.colorFieldRenderingContext) {\n                this.drawColorField();\n            }\n            if ((type === \"all\" || type === \"hue-slider\") && this.hueSliderRenderingContext) {\n                this.drawHueSlider();\n            }\n            if (this.alphaChannel &&\n                (type === \"all\" || type === \"opacity-slider\") &&\n                this.opacitySliderRenderingContext) {\n                this.drawOpacitySlider();\n            }\n        }, throttleFor60FpsInMs);\n        this.captureColorFieldColor = (x, y, skipEqual = true) => {\n            const { dimensions: { colorField: { height, width }, }, } = this;\n            const saturation = Math.round((HSV_LIMITS.s / width) * x);\n            const value = Math.round((HSV_LIMITS.v / height) * (height - y));\n            this.internalColorSet(this.baseColorFieldColor.hsv().saturationv(saturation).value(value), skipEqual);\n        };\n        this.initColorField = (canvas) => {\n            this.colorFieldRenderingContext = canvas.getContext(\"2d\");\n            this.updateCanvasSize(\"color-field\");\n            this.drawColorControls();\n        };\n        this.initHueSlider = (canvas) => {\n            this.hueSliderRenderingContext = canvas.getContext(\"2d\");\n            this.updateCanvasSize(\"hue-slider\");\n            this.drawHueSlider();\n        };\n        this.initOpacitySlider = (canvas) => {\n            if (!canvas) {\n                return;\n            }\n            this.opacitySliderRenderingContext = canvas.getContext(\"2d\");\n            this.updateCanvasSize(\"opacity-slider\");\n            this.drawOpacitySlider();\n        };\n        this.storeOpacityScope = (node) => {\n            this.opacityScopeNode = node;\n        };\n        this.handleOpacityScopeKeyDown = (event) => {\n            const modifier = event.shiftKey ? 10 : 1;\n            const { key } = event;\n            const arrowKeyToXOffset = {\n                ArrowUp: 0.01,\n                ArrowRight: 0.01,\n                ArrowDown: -0.01,\n                ArrowLeft: -0.01,\n            };\n            if (arrowKeyToXOffset[key]) {\n                event.preventDefault();\n                const delta = arrowKeyToXOffset[key] * modifier;\n                const alpha = this.baseColorFieldColor.alpha();\n                const color = this.baseColorFieldColor.alpha(alpha + delta);\n                this.internalColorSet(color, false);\n            }\n        };\n        this.allowEmpty = false;\n        this.alphaChannel = false;\n        this.channelsDisabled = false;\n        this.clearable = false;\n        this.color = DEFAULT_COLOR;\n        this.disabled = false;\n        this.format = \"auto\";\n        this.hideChannels = false;\n        this.hexDisabled = false;\n        this.hideHex = false;\n        this.hideSaved = false;\n        this.savedDisabled = false;\n        this.scale = \"m\";\n        this.storageId = undefined;\n        this.messageOverrides = undefined;\n        this.numberingSystem = undefined;\n        this.value = normalizeHex(hexify(DEFAULT_COLOR, this.alphaChannel));\n        this.defaultMessages = undefined;\n        this.channelMode = \"rgb\";\n        this.channels = this.toChannels(DEFAULT_COLOR);\n        this.dimensions = DIMENSIONS.m;\n        this.effectiveLocale = \"\";\n        this.messages = undefined;\n        this.savedColors = [];\n        this.colorFieldScopeTop = undefined;\n        this.colorFieldScopeLeft = undefined;\n        this.hueScopeLeft = undefined;\n        this.opacityScopeLeft = undefined;\n        this.scopeOrientation = undefined;\n    }\n    handleAllowEmptyOrClearableChange() {\n        this.isClearable = this.clearable || this.allowEmpty;\n    }\n    handleAlphaChannelChange(alphaChannel) {\n        const { format } = this;\n        if (alphaChannel && format !== \"auto\" && !alphaCompatible(format)) {\n            console.warn(`ignoring alphaChannel as the current format (${format}) does not support alpha`);\n            this.alphaChannel = false;\n        }\n    }\n    handleColorChange(color, oldColor) {\n        this.drawColorControls();\n        this.updateChannelsFromColor(color);\n        this.previousColor = oldColor;\n    }\n    handleFormatOrAlphaChannelChange() {\n        this.setMode(this.format);\n        this.internalColorSet(this.color, false, \"internal\");\n    }\n    handleScaleChange(scale = \"m\") {\n        this.updateDimensions(scale);\n        this.updateCanvasSize(\"all\");\n        this.drawColorControls();\n    }\n    onMessagesChange() {\n        /* wired up by t9n util */\n    }\n    handleValueChange(value, oldValue) {\n        const { isClearable, format } = this;\n        const checkMode = !isClearable || value;\n        let modeChanged = false;\n        if (checkMode) {\n            const nextMode = parseMode(value);\n            if (!nextMode || (format !== \"auto\" && nextMode !== format)) {\n                this.showIncompatibleColorWarning(value, format);\n                this.value = oldValue;\n                return;\n            }\n            modeChanged = this.mode !== nextMode;\n            this.setMode(nextMode, this.internalColorUpdateContext === null);\n        }\n        const dragging = this.activeCanvasInfo;\n        if (this.internalColorUpdateContext === \"initial\") {\n            return;\n        }\n        if (this.internalColorUpdateContext === \"user-interaction\") {\n            this.calciteColorPickerInput.emit();\n            if (!dragging) {\n                this.calciteColorPickerChange.emit();\n            }\n            return;\n        }\n        const color = isClearable && !value\n            ? null\n            : Color(value != null && typeof value === \"object\" && alphaCompatible(this.mode)\n                ? normalizeColor(value)\n                : value);\n        const colorChanged = !colorEqual(color, this.color);\n        if (modeChanged || colorChanged) {\n            this.internalColorSet(color, this.alphaChannel && !(this.mode.endsWith(\"a\") || this.mode.endsWith(\"a-css\")), \"internal\");\n        }\n    }\n    get baseColorFieldColor() {\n        return this.color || this.previousColor || DEFAULT_COLOR;\n    }\n    effectiveLocaleChange() {\n        updateMessages(this, this.effectiveLocale);\n    }\n    // using @Listen as a workaround for VDOM listener not firing\n    handleChannelKeyUpOrDown(event) {\n        this.shiftKeyChannelAdjustment = 0;\n        const { key } = event;\n        if ((key !== \"ArrowUp\" && key !== \"ArrowDown\") ||\n            !event.composedPath().some((node) => node.classList?.contains(CSS.channel))) {\n            return;\n        }\n        const { shiftKey } = event;\n        event.preventDefault();\n        if (!this.color) {\n            this.internalColorSet(this.previousColor);\n            event.stopPropagation();\n            return;\n        }\n        // this gets applied to the input's up/down arrow increment/decrement\n        const complementaryBump = 9;\n        this.shiftKeyChannelAdjustment =\n            key === \"ArrowUp\" && shiftKey\n                ? complementaryBump\n                : key === \"ArrowDown\" && shiftKey\n                    ? -complementaryBump\n                    : 0;\n    }\n    //--------------------------------------------------------------------------\n    //\n    //  Public Methods\n    //\n    //--------------------------------------------------------------------------\n    /** Sets focus on the component's first focusable element. */\n    async setFocus() {\n        await componentFocusable(this);\n        this.el.focus();\n    }\n    //--------------------------------------------------------------------------\n    //\n    //  Lifecycle\n    //\n    //--------------------------------------------------------------------------\n    async componentWillLoad() {\n        setUpLoadableComponent(this);\n        this.handleAllowEmptyOrClearableChange();\n        const { isClearable, color, format, value } = this;\n        const willSetNoColor = isClearable && !value;\n        const parsedMode = parseMode(value);\n        const valueIsCompatible = willSetNoColor || (format === \"auto\" && parsedMode) || format === parsedMode;\n        const initialColor = willSetNoColor ? null : valueIsCompatible ? Color(value) : color;\n        if (!valueIsCompatible) {\n            this.showIncompatibleColorWarning(value, format);\n        }\n        this.setMode(format, false);\n        this.internalColorSet(initialColor, false, \"initial\");\n        this.updateDimensions(this.scale);\n        const storageKey = `${DEFAULT_STORAGE_KEY_PREFIX}${this.storageId}`;\n        if (this.storageId && localStorage.getItem(storageKey)) {\n            this.savedColors = JSON.parse(localStorage.getItem(storageKey));\n        }\n        await setUpMessages(this);\n    }\n    connectedCallback() {\n        connectInteractive(this);\n        connectLocalized(this);\n        connectMessages(this);\n    }\n    componentDidLoad() {\n        setComponentLoaded(this);\n    }\n    disconnectedCallback() {\n        window.removeEventListener(\"pointermove\", this.globalPointerMoveHandler);\n        window.removeEventListener(\"pointerup\", this.globalPointerUpHandler);\n        disconnectInteractive(this);\n        disconnectLocalized(this);\n        disconnectMessages(this);\n    }\n    componentDidRender() {\n        updateHostInteraction(this);\n    }\n    //--------------------------------------------------------------------------\n    //\n    //  Render Methods\n    //\n    //--------------------------------------------------------------------------\n    render() {\n        const { channelsDisabled, color, colorFieldScopeLeft, colorFieldScopeTop, dimensions: { slider: { width: sliderWidth }, thumb: { radius: thumbRadius }, }, hexDisabled, hideChannels, hideHex, hideSaved, hueScopeLeft, messages, alphaChannel, opacityScopeLeft, savedColors, savedDisabled, scale, scopeOrientation, } = this;\n        const selectedColorInHex = color ? hexify(color, alphaChannel) : null;\n        const hueTop = thumbRadius;\n        const hueLeft = hueScopeLeft ?? (sliderWidth * DEFAULT_COLOR.hue()) / HSV_LIMITS.h;\n        const opacityTop = thumbRadius;\n        const opacityLeft = opacityScopeLeft ??\n            (sliderWidth * alphaToOpacity(DEFAULT_COLOR.alpha())) / OPACITY_LIMITS.max;\n        const noColor = color === null;\n        const vertical = scopeOrientation === \"vertical\";\n        const noHex = hexDisabled || hideHex;\n        const noChannels = channelsDisabled || hideChannels;\n        const noSaved = savedDisabled || hideSaved;\n        const [adjustedColorFieldScopeLeft, adjustedColorFieldScopeTop] = this.getAdjustedScopePosition(colorFieldScopeLeft, colorFieldScopeTop);\n        const [adjustedHueScopeLeft, adjustedHueScopeTop] = this.getAdjustedScopePosition(hueLeft, hueTop);\n        const [adjustedOpacityScopeLeft, adjustedOpacityScopeTop] = this.getAdjustedScopePosition(opacityLeft, opacityTop);\n        return (h(InteractiveContainer, { key: '5f347cb136350e7661b7b479ee86a16bb85414c3', disabled: this.disabled }, h(\"div\", { key: '0294cbc1d16db228c22a2ae1bd061d9a683c1378', class: CSS.container }, h(\"div\", { key: 'f7531da7e77293d52f5f8220443258e40f07f2d3', class: CSS.controlAndScope }, h(\"canvas\", { key: '6738d5bc8ec0f77c01eaac72b6b89edeea39abd3', class: CSS.colorField, onPointerDown: this.handleColorFieldPointerDown,\n            // eslint-disable-next-line react/jsx-sort-props -- ref should be last so node attrs/props are in sync (see https://github.com/Esri/calcite-design-system/pull/6530)\n            ref: this.initColorField }), h(\"div\", { key: '932e10e761c6e8732e3412b049c895df18c4358f', \"aria-label\": vertical ? messages.value : messages.saturation, \"aria-valuemax\": vertical ? HSV_LIMITS.v : HSV_LIMITS.s, \"aria-valuemin\": \"0\", \"aria-valuenow\": (vertical ? color?.saturationv() : color?.value()) || \"0\", class: { [CSS.scope]: true, [CSS.colorFieldScope]: true }, onKeyDown: this.handleColorFieldScopeKeyDown, role: \"slider\", style: {\n                top: `${adjustedColorFieldScopeTop || 0}px`,\n                left: `${adjustedColorFieldScopeLeft || 0}px`,\n            }, tabindex: \"0\",\n            // eslint-disable-next-line react/jsx-sort-props -- ref should be last so node attrs/props are in sync (see https://github.com/Esri/calcite-design-system/pull/6530)\n            ref: this.storeColorFieldScope })), h(\"div\", { key: '1d1e670478df18f1a8ad35d9ca217b378e103468', class: CSS.previewAndSliders }, h(\"calcite-color-picker-swatch\", { key: 'e65dd58f2aebb184db914c3a2c4e9782eb4b1e7c', class: CSS.preview, color: selectedColorInHex, scale: \"l\" }), h(\"div\", { key: '98fb46881b6c40899b8fdfa4afeb521356d1e250', class: CSS.sliders }, h(\"div\", { key: '7367b44dcc87a8cfbd5cd913ebee690eeabfcb92', class: CSS.controlAndScope }, h(\"canvas\", { key: '4fe31f39350ac02fe527452da248b07b573dadac', class: { [CSS.slider]: true, [CSS.hueSlider]: true }, onPointerDown: this.handleHueSliderPointerDown,\n            // eslint-disable-next-line react/jsx-sort-props -- ref should be last so node attrs/props are in sync (see https://github.com/Esri/calcite-design-system/pull/6530)\n            ref: this.initHueSlider }), h(\"div\", { key: '47048d9a779471169b1c4ec14d70a1a258914b1a', \"aria-label\": messages.hue, \"aria-valuemax\": HSV_LIMITS.h, \"aria-valuemin\": \"0\", \"aria-valuenow\": color?.round().hue() || DEFAULT_COLOR.round().hue(), class: { [CSS.scope]: true, [CSS.hueScope]: true }, onKeyDown: this.handleHueScopeKeyDown, role: \"slider\", style: {\n                top: `${adjustedHueScopeTop}px`,\n                left: `${adjustedHueScopeLeft}px`,\n            }, tabindex: \"0\",\n            // eslint-disable-next-line react/jsx-sort-props -- ref should be last so node attrs/props are in sync (see https://github.com/Esri/calcite-design-system/pull/6530)\n            ref: this.storeHueScope })), alphaChannel ? (h(\"div\", { class: CSS.controlAndScope }, h(\"canvas\", { class: { [CSS.slider]: true, [CSS.opacitySlider]: true }, onPointerDown: this.handleOpacitySliderPointerDown,\n            // eslint-disable-next-line react/jsx-sort-props -- ref should be last so node attrs/props are in sync (see https://github.com/Esri/calcite-design-system/pull/6530)\n            ref: this.initOpacitySlider }), h(\"div\", { \"aria-label\": messages.opacity, \"aria-valuemax\": OPACITY_LIMITS.max, \"aria-valuemin\": OPACITY_LIMITS.min, \"aria-valuenow\": (color || DEFAULT_COLOR).round().alpha(), class: { [CSS.scope]: true, [CSS.opacityScope]: true }, onKeyDown: this.handleOpacityScopeKeyDown, role: \"slider\", style: {\n                top: `${adjustedOpacityScopeTop}px`,\n                left: `${adjustedOpacityScopeLeft}px`,\n            }, tabindex: \"0\",\n            // eslint-disable-next-line react/jsx-sort-props -- ref should be last so node attrs/props are in sync (see https://github.com/Esri/calcite-design-system/pull/6530)\n            ref: this.storeOpacityScope }))) : null)), noHex && noChannels ? null : (h(\"div\", { class: {\n                [CSS.controlSection]: true,\n                [CSS.section]: true,\n            } }, h(\"div\", { class: CSS.hexAndChannelsGroup }, noHex ? null : (h(\"div\", { class: CSS.hexOptions }, h(\"calcite-color-picker-hex-input\", { allowEmpty: this.isClearable, alphaChannel: alphaChannel, class: CSS.control, messages: messages, numberingSystem: this.numberingSystem, onCalciteColorPickerHexInputChange: this.handleHexInputChange, scale: scale, value: selectedColorInHex }))), noChannels ? null : (h(\"calcite-tabs\", { class: {\n                [CSS.colorModeContainer]: true,\n                [CSS.splitSection]: true,\n            }, scale: scale === \"l\" ? \"m\" : \"s\" }, h(\"calcite-tab-nav\", { slot: \"title-group\" }, this.renderChannelsTabTitle(\"rgb\"), this.renderChannelsTabTitle(\"hsv\")), this.renderChannelsTab(\"rgb\"), this.renderChannelsTab(\"hsv\")))))), noSaved ? null : (h(\"div\", { class: { [CSS.savedColorsSection]: true, [CSS.section]: true } }, h(\"div\", { class: CSS.header }, h(\"label\", null, messages.saved), h(\"div\", { class: CSS.savedColorsButtons }, h(\"calcite-button\", { appearance: \"transparent\", class: CSS.deleteColor, disabled: noColor, iconStart: \"minus\", kind: \"neutral\", label: messages.deleteColor, onClick: this.deleteColor, scale: scale, type: \"button\" }), h(\"calcite-button\", { appearance: \"transparent\", class: CSS.saveColor, disabled: noColor, iconStart: \"plus\", kind: \"neutral\", label: messages.saveColor, onClick: this.saveColor, scale: scale, type: \"button\" }))), savedColors.length > 0 ? (h(\"div\", { class: CSS.savedColors }, [\n            ...savedColors.map((color) => (h(\"calcite-color-picker-swatch\", { class: CSS.savedColor, color: color, key: color, onClick: this.handleSavedColorSelect, onKeyDown: this.handleSavedColorKeyDown, scale: scale, tabIndex: 0 }))),\n        ])) : null)))));\n    }\n    // --------------------------------------------------------------------------\n    //\n    //  Private Methods\n    //\n    //--------------------------------------------------------------------------\n    handleKeyDown(event) {\n        if (event.key === \"Enter\") {\n            event.preventDefault();\n        }\n    }\n    showIncompatibleColorWarning(value, format) {\n        console.warn(`ignoring color value (${value}) as it is not compatible with the current format (${format})`);\n    }\n    setMode(format, warn = true) {\n        const mode = format === \"auto\" ? this.mode : format;\n        this.mode = this.ensureCompatibleMode(mode, warn);\n    }\n    ensureCompatibleMode(mode, warn) {\n        const { alphaChannel } = this;\n        const isAlphaCompatible = alphaCompatible(mode);\n        if (alphaChannel && !isAlphaCompatible) {\n            const alphaMode = toAlphaMode(mode);\n            if (warn) {\n                console.warn(`setting format to (${alphaMode}) as the provided one (${mode}) does not support alpha`);\n            }\n            return alphaMode;\n        }\n        if (!alphaChannel && isAlphaCompatible) {\n            const nonAlphaMode = toNonAlphaMode(mode);\n            if (warn) {\n                console.warn(`setting format to (${nonAlphaMode}) as the provided one (${mode}) does not support alpha`);\n            }\n            return nonAlphaMode;\n        }\n        return mode;\n    }\n    captureHueSliderColor(x) {\n        const { dimensions: { slider: { width }, }, } = this;\n        const hue = (HUE_LIMIT_CONSTRAINED / width) * x;\n        this.internalColorSet(this.baseColorFieldColor.hue(hue), false);\n    }\n    captureOpacitySliderValue(x) {\n        const { dimensions: { slider: { width }, }, } = this;\n        const alpha = opacityToAlpha((OPACITY_LIMITS.max / width) * x);\n        this.internalColorSet(this.baseColorFieldColor.alpha(alpha), false);\n    }\n    internalColorSet(color, skipEqual = true, context = \"user-interaction\") {\n        if (skipEqual && colorEqual(color, this.color)) {\n            return;\n        }\n        this.internalColorUpdateContext = context;\n        this.color = color;\n        this.value = this.toValue(color);\n        this.internalColorUpdateContext = null;\n    }\n    toValue(color, format = this.mode) {\n        if (!color) {\n            return null;\n        }\n        const hexMode = \"hex\";\n        if (format.includes(hexMode)) {\n            const hasAlpha = format === CSSColorMode.HEXA;\n            return normalizeHex(hexify(color.round(), hasAlpha), hasAlpha);\n        }\n        if (format.includes(\"-css\")) {\n            const value = color[format.replace(\"-css\", \"\").replace(\"a\", \"\")]().round().string();\n            // Color omits alpha values when alpha is 1\n            const needToInjectAlpha = (format.endsWith(\"a\") || format.endsWith(\"a-css\")) && color.alpha() === 1;\n            if (needToInjectAlpha) {\n                const model = value.slice(0, 3);\n                const values = value.slice(4, -1);\n                return `${model}a(${values}, ${color.alpha()})`;\n            }\n            return value;\n        }\n        const colorObject = \n        /* Color() does not support hsva, hsla nor rgba, so we use the non-alpha mode */\n        color[toNonAlphaMode(format)]().round().object();\n        if (format.endsWith(\"a\")) {\n            return normalizeAlpha(colorObject);\n        }\n        return colorObject;\n    }\n    getSliderCapSpacing() {\n        const { dimensions: { slider: { height }, thumb: { radius }, }, } = this;\n        return radius * 2 - height;\n    }\n    updateDimensions(scale = \"m\") {\n        this.dimensions = DIMENSIONS[scale];\n    }\n    drawColorField() {\n        const context = this.colorFieldRenderingContext;\n        const { dimensions: { colorField: { height, width }, }, } = this;\n        context.fillStyle = this.baseColorFieldColor\n            .hsv()\n            .saturationv(100)\n            .value(100)\n            .alpha(1)\n            .string();\n        context.fillRect(0, 0, width, height);\n        const whiteGradient = context.createLinearGradient(0, 0, width, 0);\n        whiteGradient.addColorStop(0, \"rgba(255,255,255,1)\");\n        whiteGradient.addColorStop(1, \"rgba(255,255,255,0)\");\n        context.fillStyle = whiteGradient;\n        context.fillRect(0, 0, width, height);\n        const blackGradient = context.createLinearGradient(0, 0, 0, height);\n        blackGradient.addColorStop(0, \"rgba(0,0,0,0)\");\n        blackGradient.addColorStop(1, \"rgba(0,0,0,1)\");\n        context.fillStyle = blackGradient;\n        context.fillRect(0, 0, width, height);\n        this.drawActiveColorFieldColor();\n    }\n    setCanvasContextSize(canvas, { height, width }) {\n        if (!canvas) {\n            return;\n        }\n        const devicePixelRatio = window.devicePixelRatio || 1;\n        canvas.width = width * devicePixelRatio;\n        canvas.height = height * devicePixelRatio;\n        canvas.style.height = `${height}px`;\n        canvas.style.width = `${width}px`;\n        const context = canvas.getContext(\"2d\");\n        context.scale(devicePixelRatio, devicePixelRatio);\n    }\n    updateCanvasSize(context = \"all\") {\n        const { dimensions } = this;\n        if (context === \"all\" || context === \"color-field\") {\n            this.setCanvasContextSize(this.colorFieldRenderingContext?.canvas, dimensions.colorField);\n        }\n        const adjustedSliderDimensions = {\n            width: dimensions.slider.width,\n            height: dimensions.slider.height + (dimensions.thumb.radius - dimensions.slider.height / 2) * 2,\n        };\n        if (context === \"all\" || context === \"hue-slider\") {\n            this.setCanvasContextSize(this.hueSliderRenderingContext?.canvas, adjustedSliderDimensions);\n        }\n        if (context === \"all\" || context === \"opacity-slider\") {\n            this.setCanvasContextSize(this.opacitySliderRenderingContext?.canvas, adjustedSliderDimensions);\n        }\n    }\n    drawActiveColorFieldColor() {\n        const { color } = this;\n        if (!color) {\n            return;\n        }\n        const hsvColor = color.hsv();\n        const { dimensions: { colorField: { height, width }, thumb: { radius }, }, } = this;\n        const x = hsvColor.saturationv() / (HSV_LIMITS.s / width);\n        const y = height - hsvColor.value() / (HSV_LIMITS.v / height);\n        requestAnimationFrame(() => {\n            this.colorFieldScopeLeft = x;\n            this.colorFieldScopeTop = y;\n        });\n        this.drawThumb(this.colorFieldRenderingContext, radius, x, y, hsvColor, false);\n    }\n    drawThumb(context, radius, x, y, color, applyAlpha) {\n        const startAngle = 0;\n        const endAngle = 2 * Math.PI;\n        const outlineWidth = 1;\n        context.beginPath();\n        context.arc(x, y, radius, startAngle, endAngle);\n        context.fillStyle = \"#fff\";\n        context.fill();\n        context.strokeStyle = \"rgba(0,0,0,0.3)\";\n        context.lineWidth = outlineWidth;\n        context.stroke();\n        if (applyAlpha && color.alpha() < 1) {\n            const pattern = context.createPattern(this.getCheckeredBackgroundPattern(), \"repeat\");\n            context.beginPath();\n            context.arc(x, y, radius - 3, startAngle, endAngle);\n            context.fillStyle = pattern;\n            context.fill();\n        }\n        context.globalCompositeOperation = \"source-atop\";\n        context.beginPath();\n        context.arc(x, y, radius - 3, startAngle, endAngle);\n        const alpha = applyAlpha ? color.alpha() : 1;\n        context.fillStyle = color.rgb().alpha(alpha).string();\n        context.fill();\n        context.globalCompositeOperation = \"source-over\";\n    }\n    drawActiveHueSliderColor() {\n        const { color } = this;\n        if (!color) {\n            return;\n        }\n        const hsvColor = color.hsv().saturationv(100).value(100);\n        const { dimensions: { slider: { width }, thumb: { radius }, }, } = this;\n        const x = hsvColor.hue() / (HUE_LIMIT_CONSTRAINED / width);\n        const y = radius;\n        const sliderBoundX = this.getSliderBoundX(x, width, radius);\n        requestAnimationFrame(() => {\n            this.hueScopeLeft = sliderBoundX;\n        });\n        this.drawThumb(this.hueSliderRenderingContext, radius, sliderBoundX, y, hsvColor, false);\n    }\n    drawHueSlider() {\n        const context = this.hueSliderRenderingContext;\n        const { dimensions: { slider: { height, width }, thumb: { radius: thumbRadius }, }, } = this;\n        const x = 0;\n        const y = thumbRadius - height / 2;\n        const gradient = context.createLinearGradient(0, 0, width, 0);\n        const hueSliderColorStopKeywords = [\n            \"red\",\n            \"yellow\",\n            \"lime\",\n            \"cyan\",\n            \"blue\",\n            \"magenta\",\n            \"#ff0004\" /* 1 unit less than #ff0 to avoid duplicate values within range */,\n        ];\n        const offset = 1 / (hueSliderColorStopKeywords.length - 1);\n        let currentOffset = 0;\n        hueSliderColorStopKeywords.forEach((keyword) => {\n            gradient.addColorStop(currentOffset, Color(keyword).string());\n            currentOffset += offset;\n        });\n        context.clearRect(0, 0, width, height + this.getSliderCapSpacing() * 2);\n        this.drawSliderPath(context, height, width, x, y);\n        context.fillStyle = gradient;\n        context.fill();\n        context.strokeStyle = \"rgba(0,0,0,0.3)\";\n        context.lineWidth = 1;\n        context.stroke();\n        this.drawActiveHueSliderColor();\n    }\n    drawOpacitySlider() {\n        const context = this.opacitySliderRenderingContext;\n        const { baseColorFieldColor: previousColor, dimensions: { slider: { height, width }, thumb: { radius: thumbRadius }, }, } = this;\n        const x = 0;\n        const y = thumbRadius - height / 2;\n        context.clearRect(0, 0, width, height + this.getSliderCapSpacing() * 2);\n        const gradient = context.createLinearGradient(0, y, width, 0);\n        const startColor = previousColor.rgb().alpha(0);\n        const midColor = previousColor.rgb().alpha(0.5);\n        const endColor = previousColor.rgb().alpha(1);\n        gradient.addColorStop(0, startColor.string());\n        gradient.addColorStop(0.5, midColor.string());\n        gradient.addColorStop(1, endColor.string());\n        this.drawSliderPath(context, height, width, x, y);\n        const pattern = context.createPattern(this.getCheckeredBackgroundPattern(), \"repeat\");\n        context.fillStyle = pattern;\n        context.fill();\n        context.fillStyle = gradient;\n        context.fill();\n        context.strokeStyle = \"rgba(0,0,0,0.3)\";\n        context.lineWidth = 1;\n        context.stroke();\n        this.drawActiveOpacitySliderColor();\n    }\n    drawSliderPath(context, height, width, x, y) {\n        const radius = height / 2 + 1;\n        context.beginPath();\n        context.moveTo(x + radius, y);\n        context.lineTo(x + width - radius, y);\n        context.quadraticCurveTo(x + width, y, x + width, y + radius);\n        context.lineTo(x + width, y + height - radius);\n        context.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);\n        context.lineTo(x + radius, y + height);\n        context.quadraticCurveTo(x, y + height, x, y + height - radius);\n        context.lineTo(x, y + radius);\n        context.quadraticCurveTo(x, y, x + radius, y);\n        context.closePath();\n    }\n    getCheckeredBackgroundPattern() {\n        if (this.checkerPattern) {\n            return this.checkerPattern;\n        }\n        const pattern = document.createElement(\"canvas\");\n        pattern.width = 10;\n        pattern.height = 10;\n        const patternContext = pattern.getContext(\"2d\");\n        patternContext.fillStyle = \"#ccc\";\n        patternContext.fillRect(0, 0, 10, 10);\n        patternContext.fillStyle = \"#fff\";\n        patternContext.fillRect(0, 0, 5, 5);\n        patternContext.fillRect(5, 5, 5, 5);\n        this.checkerPattern = pattern;\n        return pattern;\n    }\n    drawActiveOpacitySliderColor() {\n        const { color } = this;\n        if (!color) {\n            return;\n        }\n        const hsvColor = color;\n        const { dimensions: { slider: { width }, thumb: { radius }, }, } = this;\n        const x = alphaToOpacity(hsvColor.alpha()) / (OPACITY_LIMITS.max / width);\n        const y = radius;\n        const sliderBoundX = this.getSliderBoundX(x, width, radius);\n        requestAnimationFrame(() => {\n            this.opacityScopeLeft = sliderBoundX;\n        });\n        this.drawThumb(this.opacitySliderRenderingContext, radius, sliderBoundX, y, hsvColor, true);\n    }\n    getSliderBoundX(x, width, radius) {\n        const closeToEdge = closeToRangeEdge(x, width, radius);\n        return closeToEdge === 0\n            ? x\n            : closeToEdge === -1\n                ? remap(x, 0, width, radius, radius * 2)\n                : remap(x, 0, width, width - radius * 2, width - radius);\n    }\n    updateColorFromChannels(channels) {\n        this.internalColorSet(Color(channels, this.channelMode));\n    }\n    updateChannelsFromColor(color) {\n        this.channels = color ? this.toChannels(color) : [null, null, null, null];\n    }\n    toChannels(color) {\n        const { channelMode } = this;\n        const channels = color[channelMode]()\n            .array()\n            .map((value, index) => {\n            const isAlpha = index === 3;\n            return isAlpha ? value : Math.floor(value);\n        });\n        if (channels.length === 3) {\n            channels.push(1); // Color omits alpha when 1\n        }\n        return channels;\n    }\n    getAdjustedScopePosition(left, top) {\n        return [left - SCOPE_SIZE / 2, top - SCOPE_SIZE / 2];\n    }\n    static get is() { return \"calcite-color-picker\"; }\n    static get encapsulation() { return \"shadow\"; }\n    static get delegatesFocus() { return true; }\n    static get originalStyleUrls() {\n        return {\n            \"$\": [\"color-picker.scss\"]\n        };\n    }\n    static get styleUrls() {\n        return {\n            \"$\": [\"color-picker.css\"]\n        };\n    }\n    static get assetsDirs() { return [\"assets\"]; }\n    static get properties() {\n        return {\n            \"allowEmpty\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [{\n                            \"name\": \"deprecated\",\n                            \"text\": \"Use `clearable` instead\"\n                        }],\n                    \"text\": \"When `true`, an empty color (`null`) will be allowed as a `value`.\\n\\nWhen `false`, a color value is enforced, and clearing the input or blurring will restore the last valid `value`.\"\n                },\n                \"attribute\": \"allow-empty\",\n                \"reflect\": true,\n                \"defaultValue\": \"false\"\n            },\n            \"alphaChannel\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"When `true`, the component will allow updates to the color's alpha value.\"\n                },\n                \"attribute\": \"alpha-channel\",\n                \"reflect\": false,\n                \"defaultValue\": \"false\"\n            },\n            \"channelsDisabled\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"When `true`, hides the RGB/HSV channel inputs.\"\n                },\n                \"attribute\": \"channels-disabled\",\n                \"reflect\": false,\n                \"defaultValue\": \"false\"\n            },\n            \"clearable\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"When `true`, an empty color (`null`) will be allowed as a `value`.\\n\\nWhen `false`, a color value is enforced, and clearing the input or blurring will restore the last valid `value`.\"\n                },\n                \"attribute\": \"clearable\",\n                \"reflect\": true,\n                \"defaultValue\": \"false\"\n            },\n            \"color\": {\n                \"type\": \"unknown\",\n                \"mutable\": true,\n                \"complexType\": {\n                    \"original\": \"InternalColor | null\",\n                    \"resolved\": \"Color<ColorParam>\",\n                    \"references\": {\n                        \"InternalColor\": {\n                            \"location\": \"import\",\n                            \"path\": \"./interfaces\",\n                            \"id\": \"src/components/color-picker/interfaces.ts::InternalColor\"\n                        }\n                    }\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [{\n                            \"name\": \"internal\",\n                            \"text\": undefined\n                        }],\n                    \"text\": \"Internal prop for advanced use-cases.\"\n                },\n                \"defaultValue\": \"DEFAULT_COLOR\"\n            },\n            \"disabled\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"When `true`, interaction is prevented and the component is displayed with lower opacity.\"\n                },\n                \"attribute\": \"disabled\",\n                \"reflect\": true,\n                \"defaultValue\": \"false\"\n            },\n            \"format\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"Format\",\n                    \"resolved\": \"\\\"auto\\\" | \\\"hex\\\" | \\\"hexa\\\" | \\\"hsl\\\" | \\\"hsl-css\\\" | \\\"hsla\\\" | \\\"hsla-css\\\" | \\\"hsv\\\" | \\\"hsva\\\" | \\\"rgb\\\" | \\\"rgb-css\\\" | \\\"rgba\\\" | \\\"rgba-css\\\"\",\n                    \"references\": {\n                        \"Format\": {\n                            \"location\": \"import\",\n                            \"path\": \"./utils\",\n                            \"id\": \"src/components/color-picker/utils.ts::Format\"\n                        }\n                    }\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [{\n                            \"name\": \"default\",\n                            \"text\": \"\\\"auto\\\"\"\n                        }],\n                    \"text\": \"The format of `value`.\\n\\nWhen `\\\"auto\\\"`, the format will be inferred from `value` when set.\"\n                },\n                \"attribute\": \"format\",\n                \"reflect\": true,\n                \"defaultValue\": \"\\\"auto\\\"\"\n            },\n            \"hideChannels\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [{\n                            \"name\": \"deprecated\",\n                            \"text\": \"use `channelsDisabled` instead\"\n                        }],\n                    \"text\": \"When `true`, hides the RGB/HSV channel inputs.\"\n                },\n                \"attribute\": \"hide-channels\",\n                \"reflect\": true,\n                \"defaultValue\": \"false\"\n            },\n            \"hexDisabled\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"When `true`, hides the hex input.\"\n                },\n                \"attribute\": \"hex-disabled\",\n                \"reflect\": false,\n                \"defaultValue\": \"false\"\n            },\n            \"hideHex\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [{\n                            \"name\": \"deprecated\",\n                            \"text\": \"use `hexDisabled` instead\"\n                        }],\n                    \"text\": \"When `true`, hides the hex input.\"\n                },\n                \"attribute\": \"hide-hex\",\n                \"reflect\": true,\n                \"defaultValue\": \"false\"\n            },\n            \"hideSaved\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [{\n                            \"name\": \"deprecated\",\n                            \"text\": \"use `savedDisabled` instead\"\n                        }],\n                    \"text\": \"When `true`, hides the saved colors section.\"\n                },\n                \"attribute\": \"hide-saved\",\n                \"reflect\": true,\n                \"defaultValue\": \"false\"\n            },\n            \"savedDisabled\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"When `true`, hides the saved colors section.\"\n                },\n                \"attribute\": \"saved-disabled\",\n                \"reflect\": true,\n                \"defaultValue\": \"false\"\n            },\n            \"scale\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"Scale\",\n                    \"resolved\": \"\\\"l\\\" | \\\"m\\\" | \\\"s\\\"\",\n                    \"references\": {\n                        \"Scale\": {\n                            \"location\": \"import\",\n                            \"path\": \"../interfaces\",\n                            \"id\": \"src/components/interfaces.ts::Scale\"\n                        }\n                    }\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Specifies the size of the component.\"\n                },\n                \"attribute\": \"scale\",\n                \"reflect\": true,\n                \"defaultValue\": \"\\\"m\\\"\"\n            },\n            \"storageId\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string\",\n                    \"resolved\": \"string\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Specifies the storage ID for colors.\"\n                },\n                \"attribute\": \"storage-id\",\n                \"reflect\": true\n            },\n            \"messageOverrides\": {\n                \"type\": \"unknown\",\n                \"mutable\": true,\n                \"complexType\": {\n                    \"original\": \"Partial<ColorPickerMessages>\",\n                    \"resolved\": \"{ b?: string; blue?: string; deleteColor?: string; g?: string; green?: string; h?: string; hsv?: string; hex?: string; hue?: string; noColor?: string; opacity?: string; r?: string; red?: string; rgb?: string; s?: string; saturation?: string; saveColor?: string; saved?: string; v?: string; value?: string; }\",\n                    \"references\": {\n                        \"Partial\": {\n                            \"location\": \"global\",\n                            \"id\": \"global::Partial\"\n                        },\n                        \"ColorPickerMessages\": {\n                            \"location\": \"import\",\n                            \"path\": \"./assets/color-picker/t9n\",\n                            \"id\": \"src/components/color-picker/assets/color-picker/t9n/index.d.ts::ColorPickerMessages\"\n                        }\n                    }\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Use this property to override individual strings used by the component.\"\n                }\n            },\n            \"numberingSystem\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"NumberingSystem\",\n                    \"resolved\": \"\\\"arab\\\" | \\\"arabext\\\" | \\\"latn\\\"\",\n                    \"references\": {\n                        \"NumberingSystem\": {\n                            \"location\": \"import\",\n                            \"path\": \"../../utils/locale\",\n                            \"id\": \"src/utils/locale.ts::NumberingSystem\"\n                        }\n                    }\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Specifies the Unicode numeral system used by the component for localization.\"\n                },\n                \"attribute\": \"numbering-system\",\n                \"reflect\": true\n            },\n            \"value\": {\n                \"type\": \"string\",\n                \"mutable\": true,\n                \"complexType\": {\n                    \"original\": \"ColorValue | null\",\n                    \"resolved\": \"HSL | HSL & ObjectWithAlpha | HSV | HSV & ObjectWithAlpha | RGB | RGB & ObjectWithAlpha | string\",\n                    \"references\": {\n                        \"ColorValue\": {\n                            \"location\": \"import\",\n                            \"path\": \"./interfaces\",\n                            \"id\": \"src/components/color-picker/interfaces.ts::ColorValue\"\n                        }\n                    }\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [{\n                            \"name\": \"default\",\n                            \"text\": \"\\\"#007ac2\\\"\"\n                        }, {\n                            \"name\": \"see\",\n                            \"text\": \"[CSS Color](https://developer.mozilla.org/en-US/docs/Web/CSS/color)\"\n                        }, {\n                            \"name\": \"see\",\n                            \"text\": \"[ColorValue](https://github.com/Esri/calcite-design-system/blob/main/src/components/color-picker/interfaces.ts#L10)\"\n                        }],\n                    \"text\": \"The component's value, where the value can be a CSS color string, or a RGB, HSL or HSV object.\\n\\nThe type will be preserved as the color is updated.\"\n                },\n                \"attribute\": \"value\",\n                \"reflect\": false,\n                \"defaultValue\": \"normalizeHex(\\n    hexify(DEFAULT_COLOR, this.alphaChannel),\\n  )\"\n            },\n            \"messages\": {\n                \"type\": \"unknown\",\n                \"mutable\": true,\n                \"complexType\": {\n                    \"original\": \"ColorPickerMessages\",\n                    \"resolved\": \"{ b: string; blue: string; deleteColor: string; g: string; green: string; h: string; hsv: string; hex: string; hue: string; noColor: string; opacity: string; r: string; red: string; rgb: string; s: string; saturation: string; saveColor: string; saved: string; v: string; value: string; }\",\n                    \"references\": {\n                        \"ColorPickerMessages\": {\n                            \"location\": \"import\",\n                            \"path\": \"./assets/color-picker/t9n\",\n                            \"id\": \"src/components/color-picker/assets/color-picker/t9n/index.d.ts::ColorPickerMessages\"\n                        }\n                    }\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [{\n                            \"name\": \"internal\",\n                            \"text\": undefined\n                        }],\n                    \"text\": \"Made into a prop for testing purposes only\"\n                }\n            }\n        };\n    }\n    static get states() {\n        return {\n            \"defaultMessages\": {},\n            \"channelMode\": {},\n            \"channels\": {},\n            \"dimensions\": {},\n            \"effectiveLocale\": {},\n            \"savedColors\": {},\n            \"colorFieldScopeTop\": {},\n            \"colorFieldScopeLeft\": {},\n            \"hueScopeLeft\": {},\n            \"opacityScopeLeft\": {},\n            \"scopeOrientation\": {}\n        };\n    }\n    static get events() {\n        return [{\n                \"method\": \"calciteColorPickerChange\",\n                \"name\": \"calciteColorPickerChange\",\n                \"bubbles\": true,\n                \"cancelable\": false,\n                \"composed\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Fires when the color value has changed.\"\n                },\n                \"complexType\": {\n                    \"original\": \"void\",\n                    \"resolved\": \"void\",\n                    \"references\": {}\n                }\n            }, {\n                \"method\": \"calciteColorPickerInput\",\n                \"name\": \"calciteColorPickerInput\",\n                \"bubbles\": true,\n                \"cancelable\": false,\n                \"composed\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Fires as the color value changes.\\n\\nSimilar to the `calciteColorPickerChange` event with the exception of dragging. When dragging the color field or hue slider thumb, this event fires as the thumb is moved.\"\n                },\n                \"complexType\": {\n                    \"original\": \"void\",\n                    \"resolved\": \"void\",\n                    \"references\": {}\n                }\n            }];\n    }\n    static get methods() {\n        return {\n            \"setFocus\": {\n                \"complexType\": {\n                    \"signature\": \"() => Promise<void>\",\n                    \"parameters\": [],\n                    \"references\": {\n                        \"Promise\": {\n                            \"location\": \"global\",\n                            \"id\": \"global::Promise\"\n                        }\n                    },\n                    \"return\": \"Promise<void>\"\n                },\n                \"docs\": {\n                    \"text\": \"Sets focus on the component's first focusable element.\",\n                    \"tags\": []\n                }\n            }\n        };\n    }\n    static get elementRef() { return \"el\"; }\n    static get watchers() {\n        return [{\n                \"propName\": \"allowEmpty\",\n                \"methodName\": \"handleAllowEmptyOrClearableChange\"\n            }, {\n                \"propName\": \"clearable\",\n                \"methodName\": \"handleAllowEmptyOrClearableChange\"\n            }, {\n                \"propName\": \"alphaChannel\",\n                \"methodName\": \"handleAlphaChannelChange\"\n            }, {\n                \"propName\": \"color\",\n                \"methodName\": \"handleColorChange\"\n            }, {\n                \"propName\": \"alphaChannel\",\n                \"methodName\": \"handleFormatOrAlphaChannelChange\"\n            }, {\n                \"propName\": \"format\",\n                \"methodName\": \"handleFormatOrAlphaChannelChange\"\n            }, {\n                \"propName\": \"scale\",\n                \"methodName\": \"handleScaleChange\"\n            }, {\n                \"propName\": \"messageOverrides\",\n                \"methodName\": \"onMessagesChange\"\n            }, {\n                \"propName\": \"value\",\n                \"methodName\": \"handleValueChange\"\n            }, {\n                \"propName\": \"effectiveLocale\",\n                \"methodName\": \"effectiveLocaleChange\"\n            }];\n    }\n    static get listeners() {\n        return [{\n                \"name\": \"keydown\",\n                \"method\": \"handleChannelKeyUpOrDown\",\n                \"target\": undefined,\n                \"capture\": true,\n                \"passive\": false\n            }, {\n                \"name\": \"keyup\",\n                \"method\": \"handleChannelKeyUpOrDown\",\n                \"target\": undefined,\n                \"capture\": true,\n                \"passive\": false\n            }];\n    }\n}\n//# sourceMappingURL=color-picker.js.map\n"],"mappings":"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"}