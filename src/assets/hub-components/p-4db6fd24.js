import{f as n}from"./p-adee2925.js";import{c as l}from"./p-c94c130f.js";import{f as a}from"./p-9e418183.js";import{s as e}from"./p-3363f483.js";import{R as c}from"./p-56b73d71.js";const t=l(((n,l)=>a(Object.assign({channelId:n},l))),{scope:"channels",getKey:n=>n,ttl:3e3});async function r(l,r){const{post:s,parent:o,channelGroupIds:u,channelAccess:h}=l;let{channelId:i,channel:p,channelGroups:f}=l,d=null;if(p)d=null,i=p.id;else if(s||o){const n=s||o;n.channelId&&n.channelId!==(null==p?void 0:p.id)?({channelId:i,channelError:d,channel:p}=await(async n=>{let l,a,e;try{l=await t(n,r),e=null,a=l.id}catch(c){l=null,e=c,a=n}return{channel:l,channelError:e,channelId:a}})(n.channelId)):(i=p.id,d=null)}else if(i)try{p=await a(Object.assign({channelId:i},r)),i=p.id,d=null}catch(n){p=null,d=n}else u&&h?(({items:[p]}=await e(Object.assign({data:{groups:u,access:[h],num:1}},r))),p?(i=p.id,d=null):(p=null,i=null,d=new c("channel not found","",404))):(p=null,i=null,d=null);return p?(f=null!=f?f:[],(p.groups.length!==f.length||!f.every((n=>p.groups.includes(null==n?void 0:n.id))))&&(f=await Promise.all(p.groups.map((async l=>{let a;try{a=await n(l,r)}catch(n){a=null}return a}))))):f=null,{channelId:i,channel:p,channelError:d,channelGroups:f}}export{r as f}